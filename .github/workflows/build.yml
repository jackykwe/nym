name: Continuous integration


on:
  push:
    paths-ignore:
      - 'explorer/**'
  pull_request:
    paths-ignore:
      - 'explorer/**'

jobs:
  build:
    runs-on: [ self-hosted, fran-test ]
    # Enable sccache via environment variable
    env:
      RUSTC_WRAPPER: /home/runner/.cargo/bin/sccache
    steps:
      - name: Install Dependencies (Linux)
        run: sudo apt-get update && sudo apt-get -y install libwebkit2gtk-4.0-dev build-essential curl wget libssl-dev libgtk-3-dev libudev-dev squashfs-tools

      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
                        ${{ runner.os }}-cargo-

      - name: Save sccache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: ~/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
                        ${{ runner.os }}-sccache-

      - name: Install sccache
        uses: actions-rs/cargo@v1
        env:
          RUSTC_WRAPPER: ""
        with:
          command: install
          args: sccache

      - name: Start sccache server
        run: sccache --start-server

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Build all binaries
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --workspace

      - name: Run all tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-features

      - name: Run expensive tests
        if: github.ref == 'refs/heads/develop' || github.event.pull_request.base.ref == 'develop' || github.event.pull_request.base.ref == 'master'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --all-features -- --ignored

      - uses: actions-rs/clippy-check@v1
        name: Clippy checks
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --workspace --all-features

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --workspace -- -D warnings

      # COCONUT stuff

      - name: Build all binaries with coconut enabled
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --workspace --features=coconut

      - name: Run all tests with coconut enabled
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --workspace --features=coconut

      - name: Run clippy with coconut enabled
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --all-targets --features=coconut -- -D warnings

      - name: Print sccache stats
        run: sccache --show-stats

      - name: Stop sccache server
        run: sccache --stop-server || true

